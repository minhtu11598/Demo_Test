trigger:
  - main

pool:
  name: SelfHostedPool

jobs:
- job: RunRobotFramework
  displayName: Robot Framework on .venv (Windows CMD)
  steps:
    - checkout: self

    # Setup venv and install dependencies
    - script: |
        python -m pip install --upgrade pip
        if not exist .venv python -m venv .venv
        call .\.venv\Scripts\activate
        pip install --upgrade pip
        pip install -r requirements.txt
      displayName: 'Setup .venv and install dependencies'

    # Run Robot Framework tests
    - script: |
        call .\.venv\Scripts\activate
        if not exist results mkdir results
        robot --outputdir results --xunit results/xunit.xml tu_tests/practice_form1.robot
      displayName: 'Run Robot Framework tests'

    # Publish test results to Azure DevOps Test tab
    - task: PublishTestResults@2
      inputs:
        testResultsFiles: "results/xunit.xml"
        testRunTitle: 'Robot Framework Results'
        mergeTestResults: true
        failTaskOnFailedTests: true
      displayName: 'Publish test results'

    # Publish results folder as artifact (logs, report.html, etc.)
    - publish: results
      artifact: RobotResults
      displayName: 'Publish Robot Framework results as artifact'
      condition: always()

    # Upload results to Azure Blob Storage
    - powershell: |
        az storage blob upload-batch `
          --account-name mytestreportsstorage `
          --destination robot-reports/$env:BUILD_BUILDID `
          --source results `
          --connection-string "$env:AZURE_STORAGE_CONNECTION_STRING"
      displayName: 'Upload results to Azure Blob Storage'
      condition: always()
      env:
        AZURE_STORAGE_CONNECTION_STRING: '$(AZURE_STORAGE_CONNECTION_STRING)'
        BUILD_BUILDID: '$(Build.BuildId)'

    # Send Slack notification with direct link
    - powershell: |
        $status = "SUCCESS"
        if ($env:BUILD_STATUS -eq "Failed") { $status = "FAILED" }
        elseif ($env:BUILD_STATUS -eq "SucceededWithIssues") { $status = "PARTIAL SUCCESS" }

        $reportUrl = "https://<your-storage-account>.blob.core.windows.net/robot-reports/$($env:BUILD_BUILDID)/report.html"

        $msg = "Robot Framework Pipeline ($env:BUILD_BUILDNUMBER) finished with status: $status on branch $env:BUILD_SOURCEBRANCHNAME. View report: $reportUrl"

        $payload = @{ text = $msg } | ConvertTo-Json -Compress
        Invoke-RestMethod -Uri $env:SLACK_WEBHOOK_URL -Method Post -ContentType 'application/json' -Body $payload
      displayName: 'Notify Slack'
      env:
        SLACK_WEBHOOK_URL: '$(SLACK_WEBHOOK_URL)'
        BUILD_STATUS: '$(Build.Status)'
        BUILD_BUILDNUMBER: '$(Build.BuildNumber)'
        BUILD_SOURCEBRANCHNAME: '$(Build.SourceBranchName)'
        BUILD_BUILDID: '$(Build.BuildId)'
      condition: always()
