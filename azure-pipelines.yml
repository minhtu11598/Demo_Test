trigger:
  - main

pool:
  name: SelfHostedPool

jobs:
- job: RunRobotFramework
  displayName: Robot Framework on .venv (Windows CMD)
  steps:
    - checkout: self

    # Setup venv and install dependencies
    - script: |
        python -m pip install --upgrade pip
        if not exist .venv python -m venv .venv
        call .\.venv\Scripts\activate
        pip install --upgrade pip
        pip install -r requirements.txt
      displayName: 'Setup .venv and install dependencies'

    # Run Robot Framework tests
    - script: |
        call .\.venv\Scripts\activate
        if not exist results mkdir results
        robot --outputdir results --xunit results/xunit.xml tu_tests/practice_form1.robot
      displayName: 'Run Robot Framework tests'

    # Publish test results to Azure DevOps Test tab
    - task: PublishTestResults@2
      inputs:
        testResultsFiles: "results/xunit.xml"
        testRunTitle: 'Robot Framework Results'
        mergeTestResults: true
        failTaskOnFailedTests: true
      displayName: 'Publish test results'

    # Publish results folder as artifact (optional, for DevOps UI)
    - publish: results
      artifact: RobotResults
      displayName: 'Publish Robot Framework results as artifact'
      condition: always()

    # Send results via email
    - powershell: |
        # Zip results folder
        Add-Type -A System.IO.Compression.FileSystem
        $zipfile = "$(Pipeline.Workspace)/results.zip"
        if (Test-Path $zipfile) { Remove-Item $zipfile }
        [IO.Compression.ZipFile]::CreateFromDirectory("$(Pipeline.Workspace)/results", $zipfile)

        # Email settings
        $smtpServer = "smtp.gmail.com"
        $smtpPort = 587
        $from = "$(EMAIL_FROM)"
        $to = "$(EMAIL_TO)"
        $subject = "Robot Framework Test Report - $(Build.BuildNumber)"
        $body = "Hi team, please find attached the Robot Framework test results from pipeline run $(Build.BuildNumber) on branch $(Build.SourceBranchName)."

        # Auth
        $password = "$(GMAIL_APP_PASSWORD)"  
        $securePassword = ConvertTo-SecureString $password -AsPlainText -Force
        $credential = New-Object System.Management.Automation.PSCredential($from, $securePassword)

        # Send email
        Send-MailMessage `
          -From $from `
          -To $to `
          -Subject $subject `
          -Body $body `
          -SmtpServer $smtpServer `
          -Port $smtpPort `
          -UseSsl `
          -Credential $credential `
          -Attachments $zipfile
      displayName: 'Send Robot Framework results via Gmail'
      condition: always()
